{"mappings":"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","sources":["src/index.ts","src/bernstein.ts","src/ga-helpers.mjs"],"sourcesContent":["import Algebra from \"ganja.js\";\nimport { memoize, range, reduce } from \"lodash-es\";\nimport { BxB } from \"./bernstein\";\n\nimport { CGA, pointWeight, up, Mul3, ni } from \"./ga-helpers.mjs\";\n\nconst product = (...a: any[][]) =>\n  a.reduce((a, b) => a.flatMap((d) => b.map((e) => [d, e].flat())));\n\nexport const uvGrid = (uResolution: number, vResolution: number) =>\n  product(range(0, 1, 1 / uResolution), range(0, 1, 1 / vResolution));\n// todo: abstract this out\nexport const Alg = CGA;\n\nexport const fquad =\n  // todo: (Alg: any = CGA) =>\n  (pointsVectorsUV: any[][], weightsUV: any[][]) => {\n    const deg_u = pointsVectorsUV.length;\n    const deg_v = pointsVectorsUV[0].length;\n    const patchIndices = product(range(deg_u), range(deg_v));\n    const points = patchIndices.map(([i, j]: [number, number]) =>\n      up(pointsVectorsUV[i][j])\n    );\n    const weights = patchIndices.map(([i, j]: [number, number]) =>\n      pointWeight(pointsVectorsUV[i][j], weightsUV[i][j])\n    );\n\n    const PW = memoize((k) => Alg.Mul(points[k], weights[k]));\n\n    return (u: number, v: number) => {\n      const top = reduce(\n        patchIndices.map(([i, j]: [number, number], k: number) =>\n          Alg.Mul(PW(k), Alg.Scalar(BxB(deg_u, deg_v, i, j, u, v)))\n        ),\n        (x, y) => Alg.Add(x, y),\n        Alg.Scalar(0)\n      );\n      const bottom = reduce(\n        patchIndices.map(([i, j]: [number, number], k: number) =>\n          Alg.Mul(weights[k], Alg.Scalar(BxB(deg_u, deg_v, i, j, u, v)))\n        ),\n        (x, y) => Alg.Add(x, y),\n        Alg.Scalar(0)\n      );\n\n      return Alg.Div(top, bottom);\n    };\n  };\n","import triangle from \"pascals-triangle\";\nconst factorials = [\n  1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600,\n  6227020800, 87178291200, 1307674368000, 20922789888000, 355687428096000,\n  6402373705728000, 121645100408832000, 2432902008176640000,\n  51090942171709440000, 1124000727777607680000, 25852016738884976640000,\n  620448401733239439360000,\n];\nconst binomials = triangle(12);\n\nconst fct = (i: number) => factorials[i];\nconst binomial = (n: number, k: string | number) => binomials[n][k];\n\nexport const B = (d: number, i: number, t: number) =>\n  binomial(d - 1, i) * Math.pow(1 - t, d - 1 - i) * Math.pow(t, i);\n\nexport const Btri = (d: number, i: number, j: number, u: number, v: number) =>\n  (fct(d - 1) / fct(d - 1 - i - j) / fct(i) / fct(j)) *\n  Math.pow(1 - u - v, d - 1 - i - j) *\n  Math.pow(u, i) *\n  Math.pow(v, j);\n\nexport const BxB = (\n  d1: number,\n  d2: number,\n  i: number,\n  j: number,\n  t1: number,\n  t2: number\n) => B(d1, i, t1) * B(d2, j, t2);\n","import Algebra from \"ganja.js\";\nimport { reduce, reduceRight } from \"lodash-es\";\n\nexport const CGA = Algebra(4, 1);\nconst Alg = CGA\n\nexport const zero = new Array(CGA.length).fill(0);\n\nexport const e4 = Alg.Vector(0,0,0,1)\nexport const e5 = Alg.Vector(0,0,0,0,1)\nexport const ni = Alg.Vector(0,0,0,1,1)\nexport const no = Alg.Vector(0,0,0,-0.5,0.5)\nexport const Mul3 = (x,y,z) => Alg.Mul(Alg.Mul(x,y), z)\n\n// export const up = x => {\n//   console.log('x*x', Alg.Mul(x,x))\n//   return Mul3(x, x, ni)\n// }\n\nexport const up = x => reduce([no, x, Alg.Mul(Mul3(x, x, ni), Alg.Scalar(0.5))], (x,y) => Alg.Add(x,y), Alg.Scalar(0))\n\nexport const pointWeight = (point, weight) => Alg.Add(Alg.Mul(Mul3(point, ni, weight), Alg.Scalar(0.5)), weight)\n\n// Create a Clifford Algebra with 4,1 metric for 3D CGA.\n// export const { up, pointWeight } = CGA.inline(() => {\n//   // We start by defining a null basis in which we will work.\n//   var ni = 1e4 + 1e5,\n//     no = 0.5e5 - 0.5e4;\n\n//   // To create a conformal point, you upcast :\n//   var up = (x) => no + x + (x * x * ni) * 0.5;\n//   var pointWeight = (point, weight) =>\n//     (point * weight * ni) / 2 + weight;\n\n//   var Mul3 = (u, v, w) => u * v * w;\n\n//   return { up, pointWeight, ni, no, Mul3 };\n// })();"],"names":[],"version":3,"file":"index.mjs.map"}