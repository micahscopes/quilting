{"mappings":"AESA,OAAO,MAAM,sBAAuB,MAAM,eAAe,MAAM,UACM,CAAC;AAEtE,OAAO,MAAM,QAAS,CAAC;AAEvB,OAAO,MAAM,yBAEO,GAAG,EAAE,EAAE,aAAa,GAAG,EAAE,EAAE,SAahC,MAAM,KAAK,MAAM,QAkB7B,CAAC","sources":["src/src/bernstein.ts","src/src/ga-helpers.mjs","src/src/index.ts","src/index.ts"],"sourcesContent":[null,null,null,"import Algebra from \"ganja.js\";\nimport { memoize, range, reduce } from \"lodash-es\";\nimport { BxB } from \"./bernstein\";\n\nimport { CGA, pointWeight, up, Mul3, ni } from \"./ga-helpers.mjs\";\n\nconst product = (...a: any[][]) =>\n  a.reduce((a, b) => a.flatMap((d) => b.map((e) => [d, e].flat())));\n\nexport const uvGrid = (uResolution: number, vResolution: number) =>\n  product(range(0, 1, 1 / uResolution), range(0, 1, 1 / vResolution));\n// todo: abstract this out\nexport const Alg = CGA;\n\nexport const fquad =\n  // todo: (Alg: any = CGA) =>\n  (pointsVectorsUV: any[][], weightsUV: any[][]) => {\n    const deg_u = pointsVectorsUV.length;\n    const deg_v = pointsVectorsUV[0].length;\n    const patchIndices = product(range(deg_u), range(deg_v));\n    const points = patchIndices.map(([i, j]: [number, number]) =>\n      up(pointsVectorsUV[i][j])\n    );\n    const weights = patchIndices.map(([i, j]: [number, number]) =>\n      pointWeight(pointsVectorsUV[i][j], weightsUV[i][j])\n    );\n\n    const PW = memoize((k) => Alg.Mul(points[k], weights[k]));\n\n    return (u: number, v: number) => {\n      const top = reduce(\n        patchIndices.map(([i, j]: [number, number], k: number) =>\n          Alg.Mul(PW(k), Alg.Scalar(BxB(deg_u, deg_v, i, j, u, v)))\n        ),\n        (x, y) => Alg.Add(x, y),\n        Alg.Scalar(0)\n      );\n      const bottom = reduce(\n        patchIndices.map(([i, j]: [number, number], k: number) =>\n          Alg.Mul(weights[k], Alg.Scalar(BxB(deg_u, deg_v, i, j, u, v)))\n        ),\n        (x, y) => Alg.Add(x, y),\n        Alg.Scalar(0)\n      );\n\n      return Alg.Div(top, bottom);\n    };\n  };\n"],"names":[],"version":3,"file":"types.d.ts.map"}